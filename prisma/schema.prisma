// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  NEW_HANOVER
  AMBARINO
  LEMOYNE
  WEST_ELIZABETH
  NEW_AUSTIN
}

enum AnimalType {
  DEFAULT
  BIRD
  FISH
}

enum ItemType {
  ANIMAL
  PLANT
  LEGENDARY_ANIMAL
}

// Animal model stores information about different animals
model Animal {
  id        String     @id @default(cuid())
  name      String     @unique @db.VarChar(255)
  type      AnimalType @default(DEFAULT)
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
}

// Plant model stores details about various plants
model Plant {
  id        String     @id @default(cuid())
  name      String     @unique @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  location  Location[]
  comments  Comment[]
}

// LegendaryAnimal model for rare and unique animals
model LegendaryAnimal {
  id   String @id @default(cuid())
  name String @unique

  locationId String?   @unique
  location   Location? @relation(fields: [locationId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
}

// Location model to store location details
model Location {
  id        String   @id @default(cuid())
  region    String
  name      String?  @unique
  state     State
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  locationDescriptions LocationDescription[]
  animal               Animal[]
  plant                Plant[]
  legendaryAnimal      LegendaryAnimal?
  comments             Comment[]
}

model LocationDescription {
  id        String    @id @default(cuid())
  text      String
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  relatedEntities Json[]
}

// Comment model for user comments on animals, plants, and legendary animals
model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location              Location[]
  animal                Animal[]
  plant                 Plant[]
  legendaryAnimalId     String?
  legendaryAnimal       LegendaryAnimal?     @relation(fields: [legendaryAnimalId], references: [id])
  locationDescriptionId String?
  locationDescription   LocationDescription? @relation(fields: [locationDescriptionId], references: [id])
}

// User model to store user information
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  // data: [{ "id": "asd123", "type": ItemType,trackerVals:['0,1']}], where
  // 0 is identifier for isKilled, 1 is figured out on the application level identifierTrackerValsMap, in this case means true
  data      Json?    @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([data])
  @@index([email])
  @@index([name])
  @@index([data, email])
  @@index([data, name])
  @@index([email, name])
  @@index([data, email, name])
}

// model Identifier {
//   id                           String                         @id @default(cuid())
//   val                          Int                            @unique // example 0,1,2,3 
//   TrackerValsNameIdentifierMap TrackerValsNameIdentifierMap[]
//   IdentifierTracerValMap       IdentifierTracerValMap[]

// }

// model TrackerValsNameIdentifierMap {
//   id           String     @id @default(cuid())
//   type         ItemType
//   name         String     @unique // example isKilled, isCaught, isCollected
//   identifierId String
//   identifier   Identifier @relation(fields: [identifierId], references: [id])

// }

// model IdentifierTracerValMap {
//   id           String     @id @default(cuid())
//   identifierId String
//   identifier   Identifier @relation(fields: [identifierId], references: [id])
//   value        String // example: boolean
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt

// }
